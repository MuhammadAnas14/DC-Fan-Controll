
adc1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000035e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c2e  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000768  00000000  00000000  00001072  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000503  00000000  00000000  000017da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000403  00000000  00000000  00001dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000532  00000000  00000000  000021c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000026f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   8:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  10:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  14:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  18:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  1c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  20:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  24:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  28:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  2c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  30:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  34:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  38:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  3c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  40:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  44:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  48:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  4c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  50:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  54:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  58:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  5c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  60:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  68:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  6c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_clear_bss>:
  7c:	21 e0       	ldi	r18, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	01 c0       	rjmp	.+2      	; 0x86 <.do_clear_bss_start>

00000084 <.do_clear_bss_loop>:
  84:	1d 92       	st	X+, r1

00000086 <.do_clear_bss_start>:
  86:	a1 30       	cpi	r26, 0x01	; 1
  88:	b2 07       	cpc	r27, r18
  8a:	e1 f7       	brne	.-8      	; 0x84 <.do_clear_bss_loop>
  8c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
  90:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <_exit>

00000094 <__bad_interrupt>:
  94:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000098 <Initiate_PWM>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	87 b5       	in	r24, 0x27	; 39
  9a:	8a 66       	ori	r24, 0x6A	; 106
  9c:	87 bd       	out	0x27, r24	; 39
  9e:	b9 9a       	sbi	0x17, 1	; 23
  a0:	08 95       	ret

000000a2 <convert>:
	}
}//main ends

void convert(void)
{
	PORTB=PORTB&(~(1<<cs)|(1<<wr)); // CS, WR are asserted
  a2:	c2 98       	cbi	0x18, 2	; 24
  a4:	8b e7       	ldi	r24, 0x7B	; 123
  a6:	92 e9       	ldi	r25, 0x92	; 146
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <convert+0x6>
  ac:	00 c0       	rjmp	.+0      	; 0xae <convert+0xc>
  ae:	00 00       	nop
	_delay_ms(15);
	PORTB=PORTB|(1<<cs)|(1<<wr);
  b0:	88 b3       	in	r24, 0x18	; 24
  b2:	84 61       	ori	r24, 0x14	; 20
  b4:	88 bb       	out	0x18, r24	; 24
	while(PINB&(1<<intr));
  b6:	b3 99       	sbic	0x16, 3	; 22
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <convert+0x14>
}//convert ends
  ba:	08 95       	ret

000000bc <read>:
void read()
{
	PORTB=PORTB&(~((1<<cs)|(1<<rd)));
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	8a 7f       	andi	r24, 0xFA	; 250
  c0:	88 bb       	out	0x18, r24	; 24
	adc_val=adc_port;
  c2:	89 b3       	in	r24, 0x19	; 25
  c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	PORTB=PORTB|((1<<cs)|(1<<rd));
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	85 60       	ori	r24, 0x05	; 5
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	08 95       	ret

000000d0 <_LCDClear>:
	}

}

void _LCDClear(void){
	PORTC = 0x01;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	85 bb       	out	0x15, r24	; 21
	PORTE = 0x00;
  d4:	17 b8       	out	0x07, r1	; 7
  d6:	e7 ea       	ldi	r30, 0xA7	; 167
  d8:	f1 e6       	ldi	r31, 0x61	; 97
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <_LCDClear+0xa>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <_LCDClear+0x10>
  e0:	00 00       	nop
	_delay_ms(10);
	PORTE = 0x01;
  e2:	87 b9       	out	0x07, r24	; 7
  e4:	83 ed       	ldi	r24, 0xD3	; 211
  e6:	90 e3       	ldi	r25, 0x30	; 48
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <_LCDClear+0x18>
  ec:	00 c0       	rjmp	.+0      	; 0xee <_LCDClear+0x1e>
  ee:	00 00       	nop
	_delay_ms(5);
	PORTE = 0x00;
  f0:	17 b8       	out	0x07, r1	; 7
  f2:	08 95       	ret

000000f4 <_LCDFuncSet>:
}
void _LCDFuncSet(void){
	PORTC = 0x3B;
  f4:	8b e3       	ldi	r24, 0x3B	; 59
  f6:	85 bb       	out	0x15, r24	; 21
	PORTE = 0x00;
  f8:	17 b8       	out	0x07, r1	; 7
  fa:	87 ea       	ldi	r24, 0xA7	; 167
  fc:	91 e6       	ldi	r25, 0x61	; 97
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <_LCDFuncSet+0xa>
 102:	00 c0       	rjmp	.+0      	; 0x104 <_LCDFuncSet+0x10>
 104:	00 00       	nop
	_delay_ms(10);
	PORTE = 0x01;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	87 b9       	out	0x07, r24	; 7
 10a:	83 ed       	ldi	r24, 0xD3	; 211
 10c:	90 e3       	ldi	r25, 0x30	; 48
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <_LCDFuncSet+0x1a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <_LCDFuncSet+0x20>
 114:	00 00       	nop
	_delay_ms(5);
	PORTE = 0x00;
 116:	17 b8       	out	0x07, r1	; 7
 118:	08 95       	ret

0000011a <_LCD_DispCtrl>:
}
void _LCD_DispCtrl(void){
	PORTC = 0x0F;
 11a:	8f e0       	ldi	r24, 0x0F	; 15
 11c:	85 bb       	out	0x15, r24	; 21
	PORTE = 0x00;
 11e:	17 b8       	out	0x07, r1	; 7
 120:	87 ea       	ldi	r24, 0xA7	; 167
 122:	91 e6       	ldi	r25, 0x61	; 97
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <_LCD_DispCtrl+0xa>
 128:	00 c0       	rjmp	.+0      	; 0x12a <_LCD_DispCtrl+0x10>
 12a:	00 00       	nop
	_delay_ms(10);
	PORTE = 0x01;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	87 b9       	out	0x07, r24	; 7
 130:	83 ed       	ldi	r24, 0xD3	; 211
 132:	90 e3       	ldi	r25, 0x30	; 48
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <_LCD_DispCtrl+0x1a>
 138:	00 c0       	rjmp	.+0      	; 0x13a <_LCD_DispCtrl+0x20>
 13a:	00 00       	nop
	_delay_ms(5);
	PORTE = 0x00;
 13c:	17 b8       	out	0x07, r1	; 7
 13e:	08 95       	ret

00000140 <_LCDEntryMod>:
}
void _LCDEntryMod(void){
	PORTC = 0x06;
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	85 bb       	out	0x15, r24	; 21
	PORTE = 0x00;
 144:	17 b8       	out	0x07, r1	; 7
 146:	87 ea       	ldi	r24, 0xA7	; 167
 148:	91 e6       	ldi	r25, 0x61	; 97
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <_LCDEntryMod+0xa>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <_LCDEntryMod+0x10>
 150:	00 00       	nop
	_delay_ms(10);
	PORTE = 0x01;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	87 b9       	out	0x07, r24	; 7
 156:	83 ed       	ldi	r24, 0xD3	; 211
 158:	90 e3       	ldi	r25, 0x30	; 48
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <_LCDEntryMod+0x1a>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <_LCDEntryMod+0x20>
 160:	00 00       	nop
	_delay_ms(5);
	PORTE = 0x00;
 162:	17 b8       	out	0x07, r1	; 7
 164:	08 95       	ret

00000166 <_PrintChar>:
}
void _PrintChar(char K){
	PORTC = K;
 166:	85 bb       	out	0x15, r24	; 21
	PORTE = 0x0D;
 168:	8d e0       	ldi	r24, 0x0D	; 13
 16a:	87 b9       	out	0x07, r24	; 7
 16c:	83 ed       	ldi	r24, 0xD3	; 211
 16e:	90 e3       	ldi	r25, 0x30	; 48
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <_PrintChar+0xa>
 174:	00 c0       	rjmp	.+0      	; 0x176 <_PrintChar+0x10>
 176:	00 00       	nop
	_delay_ms(5);
	PORTE = 0x0C;
 178:	8c e0       	ldi	r24, 0x0C	; 12
 17a:	87 b9       	out	0x07, r24	; 7
 17c:	08 95       	ret

0000017e <lcd_work>:
	PORTB=PORTB|((1<<cs)|(1<<rd));
}//read ends


void lcd_work(void)
{
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 186:	a0 97       	sbiw	r28, 0x20	; 32
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	f8 94       	cli
 18c:	de bf       	out	0x3e, r29	; 62
 18e:	0f be       	out	0x3f, r0	; 63
 190:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0xFF;
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	84 bb       	out	0x14, r24	; 20
	DDRE = 0xFF;
 196:	86 b9       	out	0x06, r24	; 6
		_LCDClear();
		_LCDFuncSet();
		_LCD_DispCtrl();
		_LCDEntryMod();
		
		char name[16] = {' ','M','P','B','S',' ','P','R','O','J','E','C','T'};
 198:	68 94       	set
 19a:	55 24       	eor	r5, r5
 19c:	54 f8       	bld	r5, 4
 19e:	5e 01       	movw	r10, r28
 1a0:	21 e1       	ldi	r18, 0x11	; 17
 1a2:	a2 0e       	add	r10, r18
 1a4:	b1 1c       	adc	r11, r1
 1a6:	68 94       	set
 1a8:	77 24       	eor	r7, r7
 1aa:	75 f8       	bld	r7, 5
 1ac:	0f 2e       	mov	r0, r31
 1ae:	fd e4       	ldi	r31, 0x4D	; 77
 1b0:	4f 2e       	mov	r4, r31
 1b2:	f0 2d       	mov	r31, r0
 1b4:	0f 2e       	mov	r0, r31
 1b6:	f0 e5       	ldi	r31, 0x50	; 80
 1b8:	6f 2e       	mov	r6, r31
 1ba:	f0 2d       	mov	r31, r0
 1bc:	0f 2e       	mov	r0, r31
 1be:	f2 e4       	ldi	r31, 0x42	; 66
 1c0:	3f 2e       	mov	r3, r31
 1c2:	f0 2d       	mov	r31, r0
 1c4:	0f 2e       	mov	r0, r31
 1c6:	f3 e5       	ldi	r31, 0x53	; 83
 1c8:	2f 2e       	mov	r2, r31
 1ca:	f0 2d       	mov	r31, r0
		char roll[16] = {'8','8',' ','9','4',' ','9','2',' ','1','0','0',' '};
 1cc:	ce 01       	movw	r24, r28
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	4c 01       	movw	r8, r24
 1d2:	7e 01       	movw	r14, r28
 1d4:	90 e2       	ldi	r25, 0x20	; 32
 1d6:	e9 0e       	add	r14, r25
 1d8:	f1 1c       	adc	r15, r1
 1da:	6e 01       	movw	r12, r28
 1dc:	ec e0       	ldi	r30, 0x0C	; 12
 1de:	ce 0e       	add	r12, r30
 1e0:	d1 1c       	adc	r13, r1
	DDRC = 0xFF;
	DDRE = 0xFF;
	/* Replace with your application code */
	while (1)
	{
		_LCDClear();
 1e2:	0e 94 68 00 	call	0xd0	; 0xd0 <_LCDClear>
		_LCDFuncSet();
 1e6:	0e 94 7a 00 	call	0xf4	; 0xf4 <_LCDFuncSet>
		_LCD_DispCtrl();
 1ea:	0e 94 8d 00 	call	0x11a	; 0x11a <_LCD_DispCtrl>
		_LCDEntryMod();
 1ee:	0e 94 a0 00 	call	0x140	; 0x140 <_LCDEntryMod>
		
		char name[16] = {' ','M','P','B','S',' ','P','R','O','J','E','C','T'};
 1f2:	f5 01       	movw	r30, r10
 1f4:	25 2d       	mov	r18, r5
 1f6:	11 92       	st	Z+, r1
 1f8:	2a 95       	dec	r18
 1fa:	e9 f7       	brne	.-6      	; 0x1f6 <lcd_work+0x78>
 1fc:	79 8a       	std	Y+17, r7	; 0x11
 1fe:	4a 8a       	std	Y+18, r4	; 0x12
 200:	6b 8a       	std	Y+19, r6	; 0x13
 202:	3c 8a       	std	Y+20, r3	; 0x14
 204:	2d 8a       	std	Y+21, r2	; 0x15
 206:	7e 8a       	std	Y+22, r7	; 0x16
 208:	6f 8a       	std	Y+23, r6	; 0x17
 20a:	82 e5       	ldi	r24, 0x52	; 82
 20c:	88 8f       	std	Y+24, r24	; 0x18
 20e:	9f e4       	ldi	r25, 0x4F	; 79
 210:	99 8f       	std	Y+25, r25	; 0x19
 212:	ea e4       	ldi	r30, 0x4A	; 74
 214:	ea 8f       	std	Y+26, r30	; 0x1a
 216:	85 e4       	ldi	r24, 0x45	; 69
 218:	8b 8f       	std	Y+27, r24	; 0x1b
 21a:	83 e4       	ldi	r24, 0x43	; 67
 21c:	8c 8f       	std	Y+28, r24	; 0x1c
 21e:	84 e5       	ldi	r24, 0x54	; 84
 220:	8d 8f       	std	Y+29, r24	; 0x1d
		char roll[16] = {'8','8',' ','9','4',' ','9','2',' ','1','0','0',' '};
 222:	f4 01       	movw	r30, r8
 224:	25 2d       	mov	r18, r5
 226:	11 92       	st	Z+, r1
 228:	2a 95       	dec	r18
 22a:	e9 f7       	brne	.-6      	; 0x226 <lcd_work+0xa8>
 22c:	88 e3       	ldi	r24, 0x38	; 56
 22e:	89 83       	std	Y+1, r24	; 0x01
 230:	8a 83       	std	Y+2, r24	; 0x02
 232:	7b 82       	std	Y+3, r7	; 0x03
 234:	89 e3       	ldi	r24, 0x39	; 57
 236:	8c 83       	std	Y+4, r24	; 0x04
 238:	94 e3       	ldi	r25, 0x34	; 52
 23a:	9d 83       	std	Y+5, r25	; 0x05
 23c:	7e 82       	std	Y+6, r7	; 0x06
 23e:	8f 83       	std	Y+7, r24	; 0x07
 240:	82 e3       	ldi	r24, 0x32	; 50
 242:	88 87       	std	Y+8, r24	; 0x08
 244:	79 86       	std	Y+9, r7	; 0x09
 246:	81 e3       	ldi	r24, 0x31	; 49
 248:	8a 87       	std	Y+10, r24	; 0x0a
 24a:	80 e3       	ldi	r24, 0x30	; 48
 24c:	8b 87       	std	Y+11, r24	; 0x0b
 24e:	8c 87       	std	Y+12, r24	; 0x0c
 250:	7d 86       	std	Y+13, r7	; 0x0d
 252:	85 01       	movw	r16, r10
		for (int j=0; j<15; j++)
		{
			_PrintChar(name[j]);
 254:	f8 01       	movw	r30, r16
 256:	81 91       	ld	r24, Z+
 258:	8f 01       	movw	r16, r30
 25a:	0e 94 b3 00 	call	0x166	; 0x166 <_PrintChar>
 25e:	ff e9       	ldi	r31, 0x9F	; 159
 260:	26 e8       	ldi	r18, 0x86	; 134
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	f1 50       	subi	r31, 0x01	; 1
 266:	20 40       	sbci	r18, 0x00	; 0
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <lcd_work+0xe6>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_work+0xf0>
 26e:	00 00       	nop
		_LCD_DispCtrl();
		_LCDEntryMod();
		
		char name[16] = {' ','M','P','B','S',' ','P','R','O','J','E','C','T'};
		char roll[16] = {'8','8',' ','9','4',' ','9','2',' ','1','0','0',' '};
		for (int j=0; j<15; j++)
 270:	0e 15       	cp	r16, r14
 272:	1f 05       	cpc	r17, r15
 274:	79 f7       	brne	.-34     	; 0x254 <lcd_work+0xd6>
		{
			_PrintChar(name[j]);
			_delay_ms(50);
		}
		
		PORTC = 0xC0;
 276:	80 ec       	ldi	r24, 0xC0	; 192
 278:	85 bb       	out	0x15, r24	; 21
		
		PORTE = 0x00;
 27a:	17 b8       	out	0x07, r1	; 7
 27c:	e7 ea       	ldi	r30, 0xA7	; 167
 27e:	f1 e6       	ldi	r31, 0x61	; 97
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <lcd_work+0x102>
 284:	00 c0       	rjmp	.+0      	; 0x286 <lcd_work+0x108>
 286:	00 00       	nop
		_delay_ms(10);
		PORTE = 0x01;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	87 b9       	out	0x07, r24	; 7
 28c:	83 ed       	ldi	r24, 0xD3	; 211
 28e:	90 e3       	ldi	r25, 0x30	; 48
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <lcd_work+0x112>
 294:	00 c0       	rjmp	.+0      	; 0x296 <lcd_work+0x118>
 296:	00 00       	nop
		_delay_ms(5);
		PORTE = 0x00;
 298:	17 b8       	out	0x07, r1	; 7
 29a:	8e 01       	movw	r16, r28
 29c:	0f 5f       	subi	r16, 0xFF	; 255
 29e:	1f 4f       	sbci	r17, 0xFF	; 255
		
		for (int j=0; j<11; j++)
		{
			_PrintChar(roll[j]);
 2a0:	f8 01       	movw	r30, r16
 2a2:	81 91       	ld	r24, Z+
 2a4:	8f 01       	movw	r16, r30
 2a6:	0e 94 b3 00 	call	0x166	; 0x166 <_PrintChar>
 2aa:	ff e9       	ldi	r31, 0x9F	; 159
 2ac:	26 e8       	ldi	r18, 0x86	; 134
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	f1 50       	subi	r31, 0x01	; 1
 2b2:	20 40       	sbci	r18, 0x00	; 0
 2b4:	80 40       	sbci	r24, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <lcd_work+0x132>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <lcd_work+0x13c>
 2ba:	00 00       	nop
		_delay_ms(10);
		PORTE = 0x01;
		_delay_ms(5);
		PORTE = 0x00;
		
		for (int j=0; j<11; j++)
 2bc:	0c 15       	cp	r16, r12
 2be:	1d 05       	cpc	r17, r13
 2c0:	79 f7       	brne	.-34     	; 0x2a0 <lcd_work+0x122>
 2c2:	8f cf       	rjmp	.-226    	; 0x1e2 <lcd_work+0x64>

000002c4 <main>:


int main(void) 
{

	DDRA=0b00000000; // set port A as input
 2c4:	1a ba       	out	0x1a, r1	; 26
	DDRB=0b00010111; // INTR as Input ,CS, WR & RD set as output 
 2c6:	87 e1       	ldi	r24, 0x17	; 23
 2c8:	87 bb       	out	0x17, r24	; 23
	DDRD=0b11111111; //Port D set as output
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	81 bb       	out	0x11, r24	; 17
	PORTA = 0x00; 
 2ce:	1b ba       	out	0x1b, r1	; 27
	
	uint8_t pwm=0;
    Initiate_PWM();
 2d0:	0e 94 4c 00 	call	0x98	; 0x98 <Initiate_PWM>
	while(1) 
{	
	convert();
 2d4:	0e 94 51 00 	call	0xa2	; 0xa2 <convert>
	read();
 2d8:	0e 94 5e 00 	call	0xbc	; 0xbc <read>
	PORTD=adc_val;  //Output of adc
 2dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2e0:	82 bb       	out	0x12, r24	; 18
 	lcd_work();
 2e2:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_work>

000002e6 <_exit>:
 2e6:	f8 94       	cli

000002e8 <__stop_program>:
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <__stop_program>
